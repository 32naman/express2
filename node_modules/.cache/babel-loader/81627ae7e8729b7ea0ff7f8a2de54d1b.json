{"ast":null,"code":"///<reference path='mutation-summary.js'/>\nimport MutationSummary from\"mutation-summary\";export var TreeMirror=function(){function TreeMirror(root,delegate){this.root=root;this.delegate=delegate;this.idMap={};}TreeMirror.prototype.initialize=function(rootId,children){this.idMap[rootId]=this.root;for(var i=0;i<children.length;i++){this.deserializeNode(children[i],this.root);}};TreeMirror.prototype.applyChanged=function(removed,addedOrMoved,attributes,text){var _this=this;// NOTE: Applying the changes can result in an attempting to add a child\n// to a parent which is presently an ancestor of the parent. This can occur\n// based on random ordering of moves. The way we handle this is to first\n// remove all changed nodes from their parents, then apply.\naddedOrMoved.forEach(function(data){var node=_this.deserializeNode(data);var parent=_this.deserializeNode(data.parentNode);var previous=_this.deserializeNode(data.previousSibling);if(node.parentNode)node.parentNode.removeChild(node);});removed.forEach(function(data){var node=_this.deserializeNode(data);if(node.parentNode)node.parentNode.removeChild(node);});addedOrMoved.forEach(function(data){var node=_this.deserializeNode(data);var parent=_this.deserializeNode(data.parentNode);var previous=_this.deserializeNode(data.previousSibling);parent.insertBefore(node,previous?previous.nextSibling:parent.firstChild);});attributes.forEach(function(data){var node=_this.deserializeNode(data);Object.keys(data.attributes).forEach(function(attrName){var newVal=data.attributes[attrName];if(newVal===null){node.removeAttribute(attrName);}else{if(!_this.delegate||!_this.delegate.setAttribute||!_this.delegate.setAttribute(node,attrName,newVal)){node.setAttribute(attrName,newVal);}}});});text.forEach(function(data){var node=_this.deserializeNode(data);node.textContent=data.textContent;});removed.forEach(function(node){delete _this.idMap[node.id];});};TreeMirror.prototype.deserializeNode=function(nodeData,parent){var _this=this;if(nodeData===null)return null;var node=this.idMap[nodeData.id];if(node)return node;var doc=this.root.ownerDocument;if(doc===null)doc=this.root;switch(nodeData.nodeType){case Node.COMMENT_NODE:node=doc.createComment(nodeData.textContent);break;case Node.TEXT_NODE:node=doc.createTextNode(nodeData.textContent);break;case Node.DOCUMENT_TYPE_NODE:node=doc.implementation.createDocumentType(nodeData.name,nodeData.publicId,nodeData.systemId);break;case Node.ELEMENT_NODE:if(this.delegate&&this.delegate.createElement)node=this.delegate.createElement(nodeData.tagName);if(!node)node=doc.createElement(nodeData.tagName);Object.keys(nodeData.attributes).forEach(function(name){if(!_this.delegate||!_this.delegate.setAttribute||!_this.delegate.setAttribute(node,name,nodeData.attributes[name])){node.setAttribute(name,nodeData.attributes[name]);}});break;}if(!node)throw\"ouch\";this.idMap[nodeData.id]=node;if(parent)parent.appendChild(node);if(nodeData.childNodes){for(var i=0;i<nodeData.childNodes.length;i++){this.deserializeNode(nodeData.childNodes[i],node);}}return node;};return TreeMirror;}();export var TreeMirrorClient=function(){function TreeMirrorClient(target,mirror,testingQueries){var _this=this;this.target=target;this.mirror=mirror;this.nextId=1;this.knownNodes=new MutationSummary.NodeMap();var rootId=this.serializeNode(target).id;var children=[];for(var child=target.firstChild;child;child=child.nextSibling){children.push(this.serializeNode(child,true));}this.mirror.initialize(rootId,children);var self=this;var queries=[{all:true}];if(testingQueries)queries=queries.concat(testingQueries);this.mutationSummary=new MutationSummary({rootNode:target,callback:function callback(summaries){_this.applyChanged(summaries);},queries:queries});}TreeMirrorClient.prototype.disconnect=function(){if(this.mutationSummary){this.mutationSummary.disconnect();this.mutationSummary=undefined;}};TreeMirrorClient.prototype.rememberNode=function(node){var id=this.nextId++;this.knownNodes.set(node,id);return id;};TreeMirrorClient.prototype.forgetNode=function(node){this.knownNodes.delete(node);};TreeMirrorClient.prototype.serializeNode=function(node,recursive){if(node===null)return null;var id=this.knownNodes.get(node);if(id!==undefined){return{id:id};}var data={nodeType:node.nodeType,id:this.rememberNode(node)};switch(data.nodeType){case Node.DOCUMENT_TYPE_NODE:var docType=node;data.name=docType.name;data.publicId=docType.publicId;data.systemId=docType.systemId;break;case Node.COMMENT_NODE:case Node.TEXT_NODE:data.textContent=node.textContent;break;case Node.ELEMENT_NODE:var elm=node;data.tagName=elm.tagName;data.attributes={};for(var i=0;i<elm.attributes.length;i++){var attr=elm.attributes[i];data.attributes[attr.name]=attr.value;}if(recursive&&elm.childNodes.length){data.childNodes=[];for(var child=elm.firstChild;child;child=child.nextSibling){data.childNodes.push(this.serializeNode(child,true));}}break;}return data;};TreeMirrorClient.prototype.serializeAddedAndMoved=function(added,reparented,reordered){var _this=this;var all=added.concat(reparented).concat(reordered);var parentMap=new MutationSummary.NodeMap();all.forEach(function(node){var parent=node.parentNode;var children=parentMap.get(parent);if(!children){children=new MutationSummary.NodeMap();parentMap.set(parent,children);}children.set(node,true);});var moved=[];parentMap.keys().forEach(function(parent){var children=parentMap.get(parent);var keys=children.keys();while(keys.length){var node=keys[0];while(node.previousSibling&&children.has(node.previousSibling)){node=node.previousSibling;}while(node&&children.has(node)){var data=_this.serializeNode(node);data.previousSibling=_this.serializeNode(node.previousSibling);data.parentNode=_this.serializeNode(node.parentNode);moved.push(data);children.delete(node);node=node.nextSibling;}var keys=children.keys();}});return moved;};TreeMirrorClient.prototype.serializeAttributeChanges=function(attributeChanged){var _this=this;var map=new MutationSummary.NodeMap();Object.keys(attributeChanged).forEach(function(attrName){attributeChanged[attrName].forEach(function(element){var record=map.get(element);if(!record){record=_this.serializeNode(element);record.attributes={};map.set(element,record);}record.attributes[attrName]=element.getAttribute(attrName);});});return map.keys().map(function(node){return map.get(node);});};TreeMirrorClient.prototype.applyChanged=function(summaries){var _this=this;var summary=summaries[0];var removed=summary.removed.map(function(node){return _this.serializeNode(node);});var moved=this.serializeAddedAndMoved(summary.added,summary.reparented,summary.reordered);var attributes=this.serializeAttributeChanges(summary.attributeChanged);var text=summary.characterDataChanged.map(function(node){var data=_this.serializeNode(node);data.textContent=node.textContent;return data;});this.mirror.applyChanged(removed,moved,attributes,text);summary.removed.forEach(function(node){_this.forgetNode(node);});};return TreeMirrorClient;}();","map":{"version":3,"sources":["/home/revpro/Desktop/new/ToDoApp/src/tree_mirror.js"],"names":["MutationSummary","TreeMirror","root","delegate","idMap","prototype","initialize","rootId","children","i","length","deserializeNode","applyChanged","removed","addedOrMoved","attributes","text","_this","forEach","data","node","parent","parentNode","previous","previousSibling","removeChild","insertBefore","nextSibling","firstChild","Object","keys","attrName","newVal","removeAttribute","setAttribute","textContent","id","nodeData","doc","ownerDocument","nodeType","Node","COMMENT_NODE","createComment","TEXT_NODE","createTextNode","DOCUMENT_TYPE_NODE","implementation","createDocumentType","name","publicId","systemId","ELEMENT_NODE","createElement","tagName","appendChild","childNodes","TreeMirrorClient","target","mirror","testingQueries","nextId","knownNodes","NodeMap","serializeNode","child","push","self","queries","all","concat","mutationSummary","rootNode","callback","summaries","disconnect","undefined","rememberNode","set","forgetNode","delete","recursive","get","docType","elm","attr","value","serializeAddedAndMoved","added","reparented","reordered","parentMap","moved","has","serializeAttributeChanges","attributeChanged","map","element","record","getAttribute","summary","characterDataChanged"],"mappings":"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","sourcesContent":["///<reference path='mutation-summary.js'/>\nimport MutationSummary from \"mutation-summary\";\n\nexport var TreeMirror = (function () {\n  function TreeMirror(root, delegate) {\n    this.root = root;\n    this.delegate = delegate;\n    this.idMap = {};\n  }\n  TreeMirror.prototype.initialize = function (rootId, children) {\n    this.idMap[rootId] = this.root;\n    for (var i = 0; i < children.length; i++)\n      this.deserializeNode(children[i], this.root);\n  };\n  TreeMirror.prototype.applyChanged = function (\n    removed,\n    addedOrMoved,\n    attributes,\n    text\n  ) {\n    var _this = this;\n    // NOTE: Applying the changes can result in an attempting to add a child\n    // to a parent which is presently an ancestor of the parent. This can occur\n    // based on random ordering of moves. The way we handle this is to first\n    // remove all changed nodes from their parents, then apply.\n    addedOrMoved.forEach(function (data) {\n      var node = _this.deserializeNode(data);\n      var parent = _this.deserializeNode(data.parentNode);\n      var previous = _this.deserializeNode(data.previousSibling);\n      if (node.parentNode) node.parentNode.removeChild(node);\n    });\n    removed.forEach(function (data) {\n      var node = _this.deserializeNode(data);\n      if (node.parentNode) node.parentNode.removeChild(node);\n    });\n    addedOrMoved.forEach(function (data) {\n      var node = _this.deserializeNode(data);\n      var parent = _this.deserializeNode(data.parentNode);\n      var previous = _this.deserializeNode(data.previousSibling);\n      parent.insertBefore(\n        node,\n        previous ? previous.nextSibling : parent.firstChild\n      );\n    });\n    attributes.forEach(function (data) {\n      var node = _this.deserializeNode(data);\n      Object.keys(data.attributes).forEach(function (attrName) {\n        var newVal = data.attributes[attrName];\n        if (newVal === null) {\n          node.removeAttribute(attrName);\n        } else {\n          if (\n            !_this.delegate ||\n            !_this.delegate.setAttribute ||\n            !_this.delegate.setAttribute(node, attrName, newVal)\n          ) {\n            node.setAttribute(attrName, newVal);\n          }\n        }\n      });\n    });\n    text.forEach(function (data) {\n      var node = _this.deserializeNode(data);\n      node.textContent = data.textContent;\n    });\n    removed.forEach(function (node) {\n      delete _this.idMap[node.id];\n    });\n  };\n  TreeMirror.prototype.deserializeNode = function (nodeData, parent) {\n    var _this = this;\n    if (nodeData === null) return null;\n    var node = this.idMap[nodeData.id];\n    if (node) return node;\n    var doc = this.root.ownerDocument;\n    if (doc === null) doc = this.root;\n    switch (nodeData.nodeType) {\n      case Node.COMMENT_NODE:\n        node = doc.createComment(nodeData.textContent);\n        break;\n      case Node.TEXT_NODE:\n        node = doc.createTextNode(nodeData.textContent);\n        break;\n      case Node.DOCUMENT_TYPE_NODE:\n        node = doc.implementation.createDocumentType(\n          nodeData.name,\n          nodeData.publicId,\n          nodeData.systemId\n        );\n        break;\n      case Node.ELEMENT_NODE:\n        if (this.delegate && this.delegate.createElement)\n          node = this.delegate.createElement(nodeData.tagName);\n        if (!node) node = doc.createElement(nodeData.tagName);\n        Object.keys(nodeData.attributes).forEach(function (name) {\n          if (\n            !_this.delegate ||\n            !_this.delegate.setAttribute ||\n            !_this.delegate.setAttribute(node, name, nodeData.attributes[name])\n          ) {\n            node.setAttribute(name, nodeData.attributes[name]);\n          }\n        });\n        break;\n    }\n    if (!node) throw \"ouch\";\n    this.idMap[nodeData.id] = node;\n    if (parent) parent.appendChild(node);\n    if (nodeData.childNodes) {\n      for (var i = 0; i < nodeData.childNodes.length; i++)\n        this.deserializeNode(nodeData.childNodes[i], node);\n    }\n    return node;\n  };\n  return TreeMirror;\n})();\nexport var TreeMirrorClient = (function () {\n  function TreeMirrorClient(target, mirror, testingQueries) {\n    var _this = this;\n    this.target = target;\n    this.mirror = mirror;\n    this.nextId = 1;\n    this.knownNodes = new MutationSummary.NodeMap();\n    var rootId = this.serializeNode(target).id;\n    var children = [];\n    for (var child = target.firstChild; child; child = child.nextSibling)\n      children.push(this.serializeNode(child, true));\n    this.mirror.initialize(rootId, children);\n    var self = this;\n    var queries = [{ all: true }];\n    if (testingQueries) queries = queries.concat(testingQueries);\n    this.mutationSummary = new MutationSummary({\n      rootNode: target,\n      callback: function (summaries) {\n        _this.applyChanged(summaries);\n      },\n      queries: queries,\n    });\n  }\n  TreeMirrorClient.prototype.disconnect = function () {\n    if (this.mutationSummary) {\n      this.mutationSummary.disconnect();\n      this.mutationSummary = undefined;\n    }\n  };\n  TreeMirrorClient.prototype.rememberNode = function (node) {\n    var id = this.nextId++;\n    this.knownNodes.set(node, id);\n    return id;\n  };\n  TreeMirrorClient.prototype.forgetNode = function (node) {\n    this.knownNodes.delete(node);\n  };\n  TreeMirrorClient.prototype.serializeNode = function (node, recursive) {\n    if (node === null) return null;\n    var id = this.knownNodes.get(node);\n    if (id !== undefined) {\n      return { id: id };\n    }\n    var data = {\n      nodeType: node.nodeType,\n      id: this.rememberNode(node),\n    };\n    switch (data.nodeType) {\n      case Node.DOCUMENT_TYPE_NODE:\n        var docType = node;\n        data.name = docType.name;\n        data.publicId = docType.publicId;\n        data.systemId = docType.systemId;\n        break;\n      case Node.COMMENT_NODE:\n      case Node.TEXT_NODE:\n        data.textContent = node.textContent;\n        break;\n      case Node.ELEMENT_NODE:\n        var elm = node;\n        data.tagName = elm.tagName;\n        data.attributes = {};\n        for (var i = 0; i < elm.attributes.length; i++) {\n          var attr = elm.attributes[i];\n          data.attributes[attr.name] = attr.value;\n        }\n        if (recursive && elm.childNodes.length) {\n          data.childNodes = [];\n          for (var child = elm.firstChild; child; child = child.nextSibling)\n            data.childNodes.push(this.serializeNode(child, true));\n        }\n        break;\n    }\n    return data;\n  };\n  TreeMirrorClient.prototype.serializeAddedAndMoved = function (\n    added,\n    reparented,\n    reordered\n  ) {\n    var _this = this;\n    var all = added.concat(reparented).concat(reordered);\n    var parentMap = new MutationSummary.NodeMap();\n    all.forEach(function (node) {\n      var parent = node.parentNode;\n      var children = parentMap.get(parent);\n      if (!children) {\n        children = new MutationSummary.NodeMap();\n        parentMap.set(parent, children);\n      }\n      children.set(node, true);\n    });\n    var moved = [];\n    parentMap.keys().forEach(function (parent) {\n      var children = parentMap.get(parent);\n      var keys = children.keys();\n      while (keys.length) {\n        var node = keys[0];\n        while (node.previousSibling && children.has(node.previousSibling))\n          node = node.previousSibling;\n        while (node && children.has(node)) {\n          var data = _this.serializeNode(node);\n          data.previousSibling = _this.serializeNode(node.previousSibling);\n          data.parentNode = _this.serializeNode(node.parentNode);\n          moved.push(data);\n          children.delete(node);\n          node = node.nextSibling;\n        }\n        var keys = children.keys();\n      }\n    });\n    return moved;\n  };\n  TreeMirrorClient.prototype.serializeAttributeChanges = function (\n    attributeChanged\n  ) {\n    var _this = this;\n    var map = new MutationSummary.NodeMap();\n    Object.keys(attributeChanged).forEach(function (attrName) {\n      attributeChanged[attrName].forEach(function (element) {\n        var record = map.get(element);\n        if (!record) {\n          record = _this.serializeNode(element);\n          record.attributes = {};\n          map.set(element, record);\n        }\n        record.attributes[attrName] = element.getAttribute(attrName);\n      });\n    });\n    return map.keys().map(function (node) {\n      return map.get(node);\n    });\n  };\n  TreeMirrorClient.prototype.applyChanged = function (summaries) {\n    var _this = this;\n    var summary = summaries[0];\n    var removed = summary.removed.map(function (node) {\n      return _this.serializeNode(node);\n    });\n    var moved = this.serializeAddedAndMoved(\n      summary.added,\n      summary.reparented,\n      summary.reordered\n    );\n    var attributes = this.serializeAttributeChanges(summary.attributeChanged);\n    var text = summary.characterDataChanged.map(function (node) {\n      var data = _this.serializeNode(node);\n      data.textContent = node.textContent;\n      return data;\n    });\n    this.mirror.applyChanged(removed, moved, attributes, text);\n    summary.removed.forEach(function (node) {\n      _this.forgetNode(node);\n    });\n  };\n  return TreeMirrorClient;\n})();\n"]},"metadata":{},"sourceType":"module"}