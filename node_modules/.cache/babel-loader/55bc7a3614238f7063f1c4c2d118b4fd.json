{"ast":null,"code":"///<reference path='mutation-summary.js'/>\nimport MutationSummary from \"mutation-summary\";\nexport var TreeMirror = function () {\n  function TreeMirror(root, delegate) {\n    this.root = root;\n    this.delegate = delegate;\n    this.idMap = {};\n  }\n\n  TreeMirror.prototype.initialize = function (rootId, children) {\n    this.idMap[rootId] = this.root;\n\n    for (var i = 0; i < children.length; i++) this.deserializeNode(children[i], this.root);\n  };\n\n  TreeMirror.prototype.applyChanged = function (removed, addedOrMoved, attributes, text) {\n    var _this = this; // NOTE: Applying the changes can result in an attempting to add a child\n    // to a parent which is presently an ancestor of the parent. This can occur\n    // based on random ordering of moves. The way we handle this is to first\n    // remove all changed nodes from their parents, then apply.\n\n\n    addedOrMoved.forEach(function (data) {\n      var node = _this.deserializeNode(data);\n\n      var parent = _this.deserializeNode(data.parentNode);\n\n      var previous = _this.deserializeNode(data.previousSibling);\n\n      if (node.parentNode) node.parentNode.removeChild(node);\n    });\n    removed.forEach(function (data) {\n      var node = _this.deserializeNode(data);\n\n      if (node.parentNode) node.parentNode.removeChild(node);\n    });\n    addedOrMoved.forEach(function (data) {\n      var node = _this.deserializeNode(data);\n\n      var parent = _this.deserializeNode(data.parentNode);\n\n      var previous = _this.deserializeNode(data.previousSibling);\n\n      parent.insertBefore(node, previous ? previous.nextSibling : parent.firstChild);\n    });\n    attributes.forEach(function (data) {\n      var node = _this.deserializeNode(data);\n\n      Object.keys(data.attributes).forEach(function (attrName) {\n        var newVal = data.attributes[attrName];\n\n        if (newVal === null) {\n          node.removeAttribute(attrName);\n        } else {\n          if (!_this.delegate || !_this.delegate.setAttribute || !_this.delegate.setAttribute(node, attrName, newVal)) {\n            node.setAttribute(attrName, newVal);\n          }\n        }\n      });\n    });\n    text.forEach(function (data) {\n      var node = _this.deserializeNode(data);\n\n      node.textContent = data.textContent;\n    });\n    removed.forEach(function (node) {\n      delete _this.idMap[node.id];\n    });\n  };\n\n  TreeMirror.prototype.deserializeNode = function (nodeData, parent) {\n    var _this = this;\n\n    if (nodeData === null) return null;\n    var node = this.idMap[nodeData.id];\n    if (node) return node;\n    var doc = this.root.ownerDocument;\n    if (doc === null) doc = this.root;\n\n    switch (nodeData.nodeType) {\n      case Node.COMMENT_NODE:\n        node = doc.createComment(nodeData.textContent);\n        break;\n\n      case Node.TEXT_NODE:\n        node = doc.createTextNode(nodeData.textContent);\n        break;\n\n      case Node.DOCUMENT_TYPE_NODE:\n        node = doc.implementation.createDocumentType(nodeData.name, nodeData.publicId, nodeData.systemId);\n        break;\n\n      case Node.ELEMENT_NODE:\n        if (this.delegate && this.delegate.createElement) node = this.delegate.createElement(nodeData.tagName);\n        if (!node) node = doc.createElement(nodeData.tagName);\n        Object.keys(nodeData.attributes).forEach(function (name) {\n          if (!_this.delegate || !_this.delegate.setAttribute || !_this.delegate.setAttribute(node, name, nodeData.attributes[name])) {\n            node.setAttribute(name, nodeData.attributes[name]);\n          }\n        });\n        break;\n    }\n\n    if (!node) throw \"ouch\";\n    this.idMap[nodeData.id] = node;\n    if (parent) parent.appendChild(node);\n\n    if (nodeData.childNodes) {\n      for (var i = 0; i < nodeData.childNodes.length; i++) this.deserializeNode(nodeData.childNodes[i], node);\n    }\n\n    return node;\n  };\n\n  return TreeMirror;\n}();\nexport var TreeMirrorClient = function () {\n  function TreeMirrorClient(target, mirror, testingQueries) {\n    var _this = this;\n\n    this.target = target;\n    this.mirror = mirror;\n    this.nextId = 1;\n    this.knownNodes = new MutationSummary.NodeMap();\n    var rootId = this.serializeNode(target).id;\n    var children = [];\n\n    for (var child = target.firstChild; child; child = child.nextSibling) children.push(this.serializeNode(child, true));\n\n    this.mirror.initialize(rootId, children);\n    var self = this;\n    var queries = [{\n      all: true\n    }];\n    if (testingQueries) queries = queries.concat(testingQueries);\n    this.mutationSummary = new MutationSummary({\n      rootNode: target,\n      callback: function (summaries) {\n        _this.applyChanged(summaries);\n      },\n      queries: queries\n    });\n  }\n\n  TreeMirrorClient.prototype.disconnect = function () {\n    if (this.mutationSummary) {\n      this.mutationSummary.disconnect();\n      this.mutationSummary = undefined;\n    }\n  };\n\n  TreeMirrorClient.prototype.rememberNode = function (node) {\n    var id = this.nextId++;\n    this.knownNodes.set(node, id);\n    return id;\n  };\n\n  TreeMirrorClient.prototype.forgetNode = function (node) {\n    this.knownNodes.delete(node);\n  };\n\n  TreeMirrorClient.prototype.serializeNode = function (node, recursive) {\n    if (node === null) return null;\n    var id = this.knownNodes.get(node);\n\n    if (id !== undefined) {\n      return {\n        id: id\n      };\n    }\n\n    var data = {\n      nodeType: node.nodeType,\n      id: this.rememberNode(node)\n    };\n\n    switch (data.nodeType) {\n      case Node.DOCUMENT_TYPE_NODE:\n        var docType = node;\n        data.name = docType.name;\n        data.publicId = docType.publicId;\n        data.systemId = docType.systemId;\n        break;\n\n      case Node.COMMENT_NODE:\n      case Node.TEXT_NODE:\n        data.textContent = node.textContent;\n        break;\n\n      case Node.ELEMENT_NODE:\n        var elm = node;\n        data.tagName = elm.tagName;\n        data.attributes = {};\n\n        for (var i = 0; i < elm.attributes.length; i++) {\n          var attr = elm.attributes[i];\n          data.attributes[attr.name] = attr.value;\n        }\n\n        if (recursive && elm.childNodes.length) {\n          data.childNodes = [];\n\n          for (var child = elm.firstChild; child; child = child.nextSibling) data.childNodes.push(this.serializeNode(child, true));\n        }\n\n        break;\n    }\n\n    return data;\n  };\n\n  TreeMirrorClient.prototype.serializeAddedAndMoved = function (added, reparented, reordered) {\n    var _this = this;\n\n    var all = added.concat(reparented).concat(reordered);\n    var parentMap = new MutationSummary.NodeMap();\n    all.forEach(function (node) {\n      var parent = node.parentNode;\n      var children = parentMap.get(parent);\n\n      if (!children) {\n        children = new MutationSummary.NodeMap();\n        parentMap.set(parent, children);\n      }\n\n      children.set(node, true);\n    });\n    var moved = [];\n    parentMap.keys().forEach(function (parent) {\n      var children = parentMap.get(parent);\n      var keys = children.keys();\n\n      while (keys.length) {\n        var node = keys[0];\n\n        while (node.previousSibling && children.has(node.previousSibling)) node = node.previousSibling;\n\n        while (node && children.has(node)) {\n          var data = _this.serializeNode(node);\n\n          data.previousSibling = _this.serializeNode(node.previousSibling);\n          data.parentNode = _this.serializeNode(node.parentNode);\n          moved.push(data);\n          children.delete(node);\n          node = node.nextSibling;\n        }\n\n        var keys = children.keys();\n      }\n    });\n    return moved;\n  };\n\n  TreeMirrorClient.prototype.serializeAttributeChanges = function (attributeChanged) {\n    var _this = this;\n\n    var map = new MutationSummary.NodeMap();\n    Object.keys(attributeChanged).forEach(function (attrName) {\n      attributeChanged[attrName].forEach(function (element) {\n        var record = map.get(element);\n\n        if (!record) {\n          record = _this.serializeNode(element);\n          record.attributes = {};\n          map.set(element, record);\n        }\n\n        record.attributes[attrName] = element.getAttribute(attrName);\n      });\n    });\n    return map.keys().map(function (node) {\n      return map.get(node);\n    });\n  };\n\n  TreeMirrorClient.prototype.applyChanged = function (summaries) {\n    var _this = this;\n\n    var summary = summaries[0];\n    var removed = summary.removed.map(function (node) {\n      return _this.serializeNode(node);\n    });\n    var moved = this.serializeAddedAndMoved(summary.added, summary.reparented, summary.reordered);\n    var attributes = this.serializeAttributeChanges(summary.attributeChanged);\n    var text = summary.characterDataChanged.map(function (node) {\n      var data = _this.serializeNode(node);\n\n      data.textContent = node.textContent;\n      return data;\n    });\n    this.mirror.applyChanged(removed, moved, attributes, text);\n    summary.removed.forEach(function (node) {\n      _this.forgetNode(node);\n    });\n  };\n\n  return TreeMirrorClient;\n}();","map":{"version":3,"sources":["/home/revpro/Desktop/new/ToDoAppReact/ToDoApp/src/tree_mirror.js"],"names":["MutationSummary","TreeMirror","root","delegate","idMap","prototype","initialize","rootId","children","i","length","deserializeNode","applyChanged","removed","addedOrMoved","attributes","text","_this","forEach","data","node","parent","parentNode","previous","previousSibling","removeChild","insertBefore","nextSibling","firstChild","Object","keys","attrName","newVal","removeAttribute","setAttribute","textContent","id","nodeData","doc","ownerDocument","nodeType","Node","COMMENT_NODE","createComment","TEXT_NODE","createTextNode","DOCUMENT_TYPE_NODE","implementation","createDocumentType","name","publicId","systemId","ELEMENT_NODE","createElement","tagName","appendChild","childNodes","TreeMirrorClient","target","mirror","testingQueries","nextId","knownNodes","NodeMap","serializeNode","child","push","self","queries","all","concat","mutationSummary","rootNode","callback","summaries","disconnect","undefined","rememberNode","set","forgetNode","delete","recursive","get","docType","elm","attr","value","serializeAddedAndMoved","added","reparented","reordered","parentMap","moved","has","serializeAttributeChanges","attributeChanged","map","element","record","getAttribute","summary","characterDataChanged"],"mappings":"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","sourcesContent":["///<reference path='mutation-summary.js'/>\nimport MutationSummary from \"mutation-summary\";\n\nexport var TreeMirror = (function () {\n  function TreeMirror(root, delegate) {\n    this.root = root;\n    this.delegate = delegate;\n    this.idMap = {};\n  }\n  TreeMirror.prototype.initialize = function (rootId, children) {\n    this.idMap[rootId] = this.root;\n    for (var i = 0; i < children.length; i++)\n      this.deserializeNode(children[i], this.root);\n  };\n  TreeMirror.prototype.applyChanged = function (\n    removed,\n    addedOrMoved,\n    attributes,\n    text\n  ) {\n    var _this = this;\n    // NOTE: Applying the changes can result in an attempting to add a child\n    // to a parent which is presently an ancestor of the parent. This can occur\n    // based on random ordering of moves. The way we handle this is to first\n    // remove all changed nodes from their parents, then apply.\n    addedOrMoved.forEach(function (data) {\n      var node = _this.deserializeNode(data);\n      var parent = _this.deserializeNode(data.parentNode);\n      var previous = _this.deserializeNode(data.previousSibling);\n      if (node.parentNode) node.parentNode.removeChild(node);\n    });\n    removed.forEach(function (data) {\n      var node = _this.deserializeNode(data);\n      if (node.parentNode) node.parentNode.removeChild(node);\n    });\n    addedOrMoved.forEach(function (data) {\n      var node = _this.deserializeNode(data);\n      var parent = _this.deserializeNode(data.parentNode);\n      var previous = _this.deserializeNode(data.previousSibling);\n      parent.insertBefore(\n        node,\n        previous ? previous.nextSibling : parent.firstChild\n      );\n    });\n    attributes.forEach(function (data) {\n      var node = _this.deserializeNode(data);\n      Object.keys(data.attributes).forEach(function (attrName) {\n        var newVal = data.attributes[attrName];\n        if (newVal === null) {\n          node.removeAttribute(attrName);\n        } else {\n          if (\n            !_this.delegate ||\n            !_this.delegate.setAttribute ||\n            !_this.delegate.setAttribute(node, attrName, newVal)\n          ) {\n            node.setAttribute(attrName, newVal);\n          }\n        }\n      });\n    });\n    text.forEach(function (data) {\n      var node = _this.deserializeNode(data);\n      node.textContent = data.textContent;\n    });\n    removed.forEach(function (node) {\n      delete _this.idMap[node.id];\n    });\n  };\n  TreeMirror.prototype.deserializeNode = function (nodeData, parent) {\n    var _this = this;\n    if (nodeData === null) return null;\n    var node = this.idMap[nodeData.id];\n    if (node) return node;\n    var doc = this.root.ownerDocument;\n    if (doc === null) doc = this.root;\n    switch (nodeData.nodeType) {\n      case Node.COMMENT_NODE:\n        node = doc.createComment(nodeData.textContent);\n        break;\n      case Node.TEXT_NODE:\n        node = doc.createTextNode(nodeData.textContent);\n        break;\n      case Node.DOCUMENT_TYPE_NODE:\n        node = doc.implementation.createDocumentType(\n          nodeData.name,\n          nodeData.publicId,\n          nodeData.systemId\n        );\n        break;\n      case Node.ELEMENT_NODE:\n        if (this.delegate && this.delegate.createElement)\n          node = this.delegate.createElement(nodeData.tagName);\n        if (!node) node = doc.createElement(nodeData.tagName);\n        Object.keys(nodeData.attributes).forEach(function (name) {\n          if (\n            !_this.delegate ||\n            !_this.delegate.setAttribute ||\n            !_this.delegate.setAttribute(node, name, nodeData.attributes[name])\n          ) {\n            node.setAttribute(name, nodeData.attributes[name]);\n          }\n        });\n        break;\n    }\n    if (!node) throw \"ouch\";\n    this.idMap[nodeData.id] = node;\n    if (parent) parent.appendChild(node);\n    if (nodeData.childNodes) {\n      for (var i = 0; i < nodeData.childNodes.length; i++)\n        this.deserializeNode(nodeData.childNodes[i], node);\n    }\n    return node;\n  };\n  return TreeMirror;\n})();\nexport var TreeMirrorClient = (function () {\n  function TreeMirrorClient(target, mirror, testingQueries) {\n    var _this = this;\n    this.target = target;\n    this.mirror = mirror;\n    this.nextId = 1;\n    this.knownNodes = new MutationSummary.NodeMap();\n    var rootId = this.serializeNode(target).id;\n    var children = [];\n    for (var child = target.firstChild; child; child = child.nextSibling)\n      children.push(this.serializeNode(child, true));\n    this.mirror.initialize(rootId, children);\n    var self = this;\n    var queries = [{ all: true }];\n    if (testingQueries) queries = queries.concat(testingQueries);\n    this.mutationSummary = new MutationSummary({\n      rootNode: target,\n      callback: function (summaries) {\n        _this.applyChanged(summaries);\n      },\n      queries: queries,\n    });\n  }\n  TreeMirrorClient.prototype.disconnect = function () {\n    if (this.mutationSummary) {\n      this.mutationSummary.disconnect();\n      this.mutationSummary = undefined;\n    }\n  };\n  TreeMirrorClient.prototype.rememberNode = function (node) {\n    var id = this.nextId++;\n    this.knownNodes.set(node, id);\n    return id;\n  };\n  TreeMirrorClient.prototype.forgetNode = function (node) {\n    this.knownNodes.delete(node);\n  };\n  TreeMirrorClient.prototype.serializeNode = function (node, recursive) {\n    if (node === null) return null;\n    var id = this.knownNodes.get(node);\n    if (id !== undefined) {\n      return { id: id };\n    }\n    var data = {\n      nodeType: node.nodeType,\n      id: this.rememberNode(node),\n    };\n    switch (data.nodeType) {\n      case Node.DOCUMENT_TYPE_NODE:\n        var docType = node;\n        data.name = docType.name;\n        data.publicId = docType.publicId;\n        data.systemId = docType.systemId;\n        break;\n      case Node.COMMENT_NODE:\n      case Node.TEXT_NODE:\n        data.textContent = node.textContent;\n        break;\n      case Node.ELEMENT_NODE:\n        var elm = node;\n        data.tagName = elm.tagName;\n        data.attributes = {};\n        for (var i = 0; i < elm.attributes.length; i++) {\n          var attr = elm.attributes[i];\n          data.attributes[attr.name] = attr.value;\n        }\n        if (recursive && elm.childNodes.length) {\n          data.childNodes = [];\n          for (var child = elm.firstChild; child; child = child.nextSibling)\n            data.childNodes.push(this.serializeNode(child, true));\n        }\n        break;\n    }\n    return data;\n  };\n  TreeMirrorClient.prototype.serializeAddedAndMoved = function (\n    added,\n    reparented,\n    reordered\n  ) {\n    var _this = this;\n    var all = added.concat(reparented).concat(reordered);\n    var parentMap = new MutationSummary.NodeMap();\n    all.forEach(function (node) {\n      var parent = node.parentNode;\n      var children = parentMap.get(parent);\n      if (!children) {\n        children = new MutationSummary.NodeMap();\n        parentMap.set(parent, children);\n      }\n      children.set(node, true);\n    });\n    var moved = [];\n    parentMap.keys().forEach(function (parent) {\n      var children = parentMap.get(parent);\n      var keys = children.keys();\n      while (keys.length) {\n        var node = keys[0];\n        while (node.previousSibling && children.has(node.previousSibling))\n          node = node.previousSibling;\n        while (node && children.has(node)) {\n          var data = _this.serializeNode(node);\n          data.previousSibling = _this.serializeNode(node.previousSibling);\n          data.parentNode = _this.serializeNode(node.parentNode);\n          moved.push(data);\n          children.delete(node);\n          node = node.nextSibling;\n        }\n        var keys = children.keys();\n      }\n    });\n    return moved;\n  };\n  TreeMirrorClient.prototype.serializeAttributeChanges = function (\n    attributeChanged\n  ) {\n    var _this = this;\n    var map = new MutationSummary.NodeMap();\n    Object.keys(attributeChanged).forEach(function (attrName) {\n      attributeChanged[attrName].forEach(function (element) {\n        var record = map.get(element);\n        if (!record) {\n          record = _this.serializeNode(element);\n          record.attributes = {};\n          map.set(element, record);\n        }\n        record.attributes[attrName] = element.getAttribute(attrName);\n      });\n    });\n    return map.keys().map(function (node) {\n      return map.get(node);\n    });\n  };\n  TreeMirrorClient.prototype.applyChanged = function (summaries) {\n    var _this = this;\n    var summary = summaries[0];\n    var removed = summary.removed.map(function (node) {\n      return _this.serializeNode(node);\n    });\n    var moved = this.serializeAddedAndMoved(\n      summary.added,\n      summary.reparented,\n      summary.reordered\n    );\n    var attributes = this.serializeAttributeChanges(summary.attributeChanged);\n    var text = summary.characterDataChanged.map(function (node) {\n      var data = _this.serializeNode(node);\n      data.textContent = node.textContent;\n      return data;\n    });\n    this.mirror.applyChanged(removed, moved, attributes, text);\n    summary.removed.forEach(function (node) {\n      _this.forgetNode(node);\n    });\n  };\n  return TreeMirrorClient;\n})();\n"]},"metadata":{},"sourceType":"module"}