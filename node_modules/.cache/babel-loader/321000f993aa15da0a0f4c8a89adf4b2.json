{"ast":null,"code":"var _jsxFileName = \"/home/revpro/Desktop/new/ToDoAppReact/ToDoApp/src/components/TodoApp.tsx\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport netCalls from \"../netCallsMod\";\nimport ListSelector from \"./ListSelector\";\nimport SearchBar from \"./SearchBar\";\nimport TodoList from \"./TodoList\";\nimport InputTodo from \"./InputTodo\";\nimport ShareableLink from \"./ShareableLink\";\nimport ScreenSharing from \"./ScreenSharing\";\nimport { TreeMirrorClient } from \"../tree_mirror\";\nimport \"./TodoApp.css\";\nconst PORT = 8000;\nconst ScreenSharePORT = 7000;\nconst getURL = `http://localhost:${PORT}/getdata`;\nconst socketURL = `ws://localhost:${ScreenSharePORT}/screenShareClient`;\n\nfunction useScreenShareWithWebRTC() {\n  const [sharing, setSharing] = useState(\"off\");\n  const [, setSocket] = useState(undefined);\n  const peer = useRef(null);\n  const dataChannel = useRef(null);\n  const msgs = useRef([JSON.stringify({\n    clear: true\n  })]);\n  const peerConn = useRef(false);\n  useEffect(() => {\n    let peerDataSend = data => {\n      if (peerConn.current === false) {\n        msgs.current.push(JSON.stringify(data));\n      } else {\n        dataChannel.current.send(JSON.stringify(data));\n      }\n    };\n\n    console.log(sharing);\n\n    if (sharing === \"off\") {\n      console.log(\"Entering off\"); // if(shareSocket !== undefined) shareSocket.close();\n      // setSocket(undefined);\n\n      setSocket(socket => {\n        if (socket !== undefined) socket.close();\n        return undefined;\n      });\n    } else {\n      let socket = new WebSocket(socketURL + `?hash=${sharing}`);\n      setSocket(socket);\n      let mirrorClient;\n      let mousePos;\n\n      document.onmousemove = e => {\n        let width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n        let height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n        mousePos = {\n          x: e.pageX,\n          y: e.pageY,\n          width: width,\n          height: height\n        }; // socket.send(JSON.stringify(mousePos));\n\n        peerDataSend(mousePos);\n      };\n\n      window.onscroll = () => {\n        let verScroll = document.documentElement.scrollTop || document.body.scrollTop; // socket.send(JSON.stringify({ scroll: verScroll }));\n\n        peerDataSend({\n          scroll: verScroll\n        });\n      };\n\n      socket.onopen = () => {\n        peerDataSend({\n          base: window.location.href.match(/^(.*\\/)[^/]*$/)[1]\n        });\n        mirrorClient = new TreeMirrorClient(document, {\n          initialize: function (rootId, children) {\n            peerDataSend({\n              f: \"initialize\",\n              args: [rootId, children]\n            });\n          },\n          applyChanged: function (removed, addedOrMoved, attributes, text) {\n            peerDataSend({\n              f: \"applyChanged\",\n              args: [removed, addedOrMoved, attributes, text]\n            });\n          }\n        }, null);\n      };\n\n      socket.onmessage = function (event) {\n        let data = JSON.parse(event.data);\n        console.log(data);\n\n        if (data.type === \"offer\") {\n          console.log(\"Peer Creation\");\n          let config = {\n            iceServers: [{\n              urls: \"stun:stun.l.google.com:19302\"\n            }]\n          };\n          peer.current = new RTCPeerConnection(config);\n\n          peer.current.onicecandidate = event => {\n            if (!event || !event.candidate) {\n              console.log(event.candidate);\n              return;\n            }\n\n            socket.send(JSON.stringify({\n              type: \"candidate\",\n              value: event.candidate\n            }));\n          };\n\n          peer.current.onconnectionstatechange = event => {\n            if (peer.current.connectionState === \"connected\") {\n              console.log(\"Peer Connected\");\n            }\n          };\n\n          peer.current.setRemoteDescription(new RTCSessionDescription(data.value));\n          let sdpConstraints = {\n            offerToReceiveAudio: false,\n            offerToReceiveVideo: false\n          };\n          peer.current.createAnswer(sdpConstraints).then(descrip => {\n            console.log(\"Sending Answer\");\n            peer.current.setLocalDescription(descrip);\n            socket.send(JSON.stringify({\n              type: \"answer\",\n              value: descrip\n            }));\n          }, null);\n\n          peer.current.ondatachannel = event => {\n            dataChannel.current = event.channel;\n\n            dataChannel.current.onmessage = event => {\n              console.log(\"Message from Agent to Client on Data Channel\");\n            };\n\n            dataChannel.current.onopen = () => {\n              console.log(\"Data Channel Opened on Client\");\n              peerConn.current = true;\n              dataChannel.current.send(JSON.stringify(msgs.current));\n            };\n\n            dataChannel.current.onclose = () => {\n              console.log(\"Data Channel Closed on Client\");\n            };\n          };\n        }\n\n        if (data.type === \"candidate\") {\n          console.log(\"Processing ICE\");\n          peer.current.addIceCandidate(new RTCIceCandidate(data.value));\n        }\n      };\n\n      socket.onclose = function () {\n        console.log(\"Screen Sharing Socket Close\"); // Maybe send a message to the other peer to close\n        // peer.current.destroy();\n\n        dataChannel.current.send(JSON.stringify({\n          clear: true\n        }));\n        peer.current.close();\n        peer.current = null;\n        mirrorClient.disconnect();\n      };\n    }\n  }, [sharing]);\n  return [sharing, setSharing];\n}\n\nfunction TodoApp(props) {\n  const [todos, setTodos] = useState([]);\n  const [listNum, setListNum] = useState(1);\n  const [totalLists, setTotalLists] = useState(1);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  let [filteredTodos, setFilteredTodos] = useState(null);\n  const [date, setDate] = useState(new Date().toLocaleDateString(\"en-IN\", {\n    day: \"numeric\",\n    month: \"short\",\n    weekday: \"short\"\n  }));\n  const [id_token, setID] = useState(localStorage.getItem(\"id_token\"));\n  const [sharing, setSharing] = useScreenShareWithWebRTC();\n  const state = {\n    todos: todos,\n    listNum: listNum,\n    totalLists: totalLists,\n    searchQuery: searchQuery,\n    filteredTodos: filteredTodos,\n    date: date,\n    id_token: id_token,\n    sharing: sharing\n  };\n\n  let updateState = stateData => {\n    if (stateData.todos) setTodos([...stateData.todos]);\n    if (stateData.listNum) setListNum(stateData.listNum);\n    if (stateData.totalLists) setTotalLists(stateData.totalLists);\n    if (stateData.searchQuery) setSearchQuery(stateData.searchQuery);\n\n    if (stateData.filteredTodos !== undefined) {\n      if (stateData.filteredTodos === null) setFilteredTodos(null);else setFilteredTodos([...stateData.filteredTodos]);\n    }\n\n    if (stateData.date) setDate(stateData.date);\n    if (stateData.id_token) setID(stateData.id_token);\n    if (stateData.sharing) setSharing(stateData.sharing);\n  };\n\n  useEffect(() => {\n    netCalls.getJSON(getURL, 1, (err, data) => {\n      if (err !== null) {\n        console.log(\"Empty\");\n      } else {\n        setTodos(JSON.parse(data[\"json\"]));\n        setTotalLists(Number(data[\"listNum\"]));\n      }\n    }, id_token);\n    console.log(\"Reached.\");\n    gapi.load(\"auth2\", function () {\n      gapi.auth2.init();\n    });\n  }, [id_token]);\n\n  let signOutFunc = e => {\n    e.preventDefault();\n    console.log(\"Sign out started\");\n    var auth2 = gapi.auth2.getAuthInstance();\n    auth2.signOut().then(function () {\n      console.log(\"User signed out.\");\n      props.history.push(\"/login\");\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 9\n    }\n  }, date), /*#__PURE__*/React.createElement(\"a\", {\n    href: \"\",\n    id: \"signOut\",\n    onClick: signOutFunc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 9\n    }\n  }, \"Sign Out\"), /*#__PURE__*/React.createElement(ListSelector, {\n    state: state,\n    updateState: updateState,\n    setTodos: setTodos,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SearchBar, {\n    state: state,\n    setFilteredTodos: setFilteredTodos,\n    setSearchQuery: setSearchQuery,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(TodoList, {\n    state: state,\n    setTodos: setTodos,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(InputTodo, {\n    state: state,\n    setTodos: setTodos,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ShareableLink, {\n    state: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ScreenSharing, {\n    sharing: sharing,\n    setSharing: setSharing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default TodoApp;","map":{"version":3,"sources":["/home/revpro/Desktop/new/ToDoAppReact/ToDoApp/src/components/TodoApp.tsx"],"names":["React","useState","useEffect","useRef","netCalls","ListSelector","SearchBar","TodoList","InputTodo","ShareableLink","ScreenSharing","TreeMirrorClient","PORT","ScreenSharePORT","getURL","socketURL","useScreenShareWithWebRTC","sharing","setSharing","setSocket","undefined","peer","dataChannel","msgs","JSON","stringify","clear","peerConn","peerDataSend","data","current","push","send","console","log","socket","close","WebSocket","mirrorClient","mousePos","document","onmousemove","e","width","window","innerWidth","documentElement","clientWidth","body","height","innerHeight","clientHeight","x","pageX","y","pageY","onscroll","verScroll","scrollTop","scroll","onopen","base","location","href","match","initialize","rootId","children","f","args","applyChanged","removed","addedOrMoved","attributes","text","onmessage","event","parse","type","config","iceServers","urls","RTCPeerConnection","onicecandidate","candidate","value","onconnectionstatechange","connectionState","setRemoteDescription","RTCSessionDescription","sdpConstraints","offerToReceiveAudio","offerToReceiveVideo","createAnswer","then","descrip","setLocalDescription","ondatachannel","channel","onclose","addIceCandidate","RTCIceCandidate","disconnect","TodoApp","props","todos","setTodos","listNum","setListNum","totalLists","setTotalLists","searchQuery","setSearchQuery","filteredTodos","setFilteredTodos","date","setDate","Date","toLocaleDateString","day","month","weekday","id_token","setID","localStorage","getItem","state","updateState","stateData","getJSON","err","Number","gapi","load","auth2","init","signOutFunc","preventDefault","getAuthInstance","signOut","history"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport netCalls from \"../netCallsMod\";\nimport ListSelector from \"./ListSelector\";\nimport SearchBar from \"./SearchBar\";\nimport TodoList from \"./TodoList\";\nimport InputTodo from \"./InputTodo\";\nimport ShareableLink from \"./ShareableLink\";\nimport ScreenSharing from \"./ScreenSharing\";\nimport { TreeMirrorClient } from \"../tree_mirror\";\nimport \"./TodoApp.css\";\nimport { RouteComponentProps } from \"react-router-dom\";\n\ndeclare var gapi: any;\nconst PORT = 8000;\nconst ScreenSharePORT = 7000;\nconst getURL = `http://localhost:${PORT}/getdata`;\nconst socketURL = `ws://localhost:${ScreenSharePORT}/screenShareClient`;\n\nexport interface TodoItem {\n  text: string;\n  done: boolean;\n  id: number;\n}\n\nexport interface State {\n  todos: TodoItem[];\n  listNum: number;\n  totalLists: number;\n  searchQuery: string;\n  filteredTodos: TodoItem[] | null;\n  date: string;\n  id_token: string | null;\n  sharing: string;\n}\n\nfunction useScreenShareWithWebRTC(): [\n  string,\n  React.Dispatch<React.SetStateAction<string>>\n] {\n  const [sharing, setSharing] = useState<string>(\"off\");\n  const [, setSocket] = useState<WebSocket | undefined>(undefined);\n  const peer = useRef<RTCPeerConnection>(null);\n  const dataChannel = useRef<RTCDataChannel>(null);\n  const msgs = useRef<string[]>([JSON.stringify({ clear: true })]);\n  const peerConn = useRef(false);\n\n  useEffect(() => {\n    let peerDataSend = (data) => {\n      if (peerConn.current === false) {\n        msgs.current.push(JSON.stringify(data));\n      } else {\n        dataChannel.current.send(JSON.stringify(data));\n      }\n    };\n\n    console.log(sharing);\n    if (sharing === \"off\") {\n      console.log(\"Entering off\");\n      // if(shareSocket !== undefined) shareSocket.close();\n      // setSocket(undefined);\n      setSocket((socket) => {\n        if (socket !== undefined) socket.close();\n        return undefined;\n      });\n    } else {\n      let socket = new WebSocket(socketURL + `?hash=${sharing}`);\n      setSocket(socket);\n\n      let mirrorClient: any;\n      let mousePos: { x: number; y: number; width: number; height: number };\n\n      document.onmousemove = (e) => {\n        let width =\n          window.innerWidth ||\n          document.documentElement.clientWidth ||\n          document.body.clientWidth;\n        let height =\n          window.innerHeight ||\n          document.documentElement.clientHeight ||\n          document.body.clientHeight;\n\n        mousePos = {\n          x: e.pageX,\n          y: e.pageY,\n          width: width,\n          height: height,\n        };\n        // socket.send(JSON.stringify(mousePos));\n        peerDataSend(mousePos);\n      };\n\n      window.onscroll = () => {\n        let verScroll =\n          document.documentElement.scrollTop || document.body.scrollTop;\n        // socket.send(JSON.stringify({ scroll: verScroll }));\n        peerDataSend({ scroll: verScroll });\n      };\n\n      socket.onopen = () => {\n        peerDataSend({\n          base: window.location.href.match(/^(.*\\/)[^/]*$/)![1],\n        });\n        mirrorClient = new TreeMirrorClient(\n          document,\n          {\n            initialize: function (rootId: number, children: object[]) {\n              peerDataSend({\n                f: \"initialize\",\n                args: [rootId, children],\n              });\n            },\n\n            applyChanged: function (\n              removed: object[],\n              addedOrMoved: object[],\n              attributes: object[],\n              text: object[]\n            ) {\n              peerDataSend({\n                f: \"applyChanged\",\n                args: [removed, addedOrMoved, attributes, text],\n              });\n            },\n          },\n          null\n        );\n      };\n\n      socket.onmessage = function (event) {\n        let data = JSON.parse(event.data);\n        console.log(data);\n        if (data.type === \"offer\") {\n          console.log(\"Peer Creation\");\n          let config = {\n            iceServers: [{ urls: \"stun:stun.l.google.com:19302\" }],\n          };\n          peer.current = new RTCPeerConnection(config);\n\n          peer.current.onicecandidate = (event) => {\n            if (!event || !event.candidate) {\n              console.log(event.candidate);\n              return;\n            }\n            socket.send(\n              JSON.stringify({\n                type: \"candidate\",\n                value: event.candidate,\n              })\n            );\n          };\n\n          peer.current.onconnectionstatechange = (event) => {\n            if (peer.current.connectionState === \"connected\") {\n              console.log(\"Peer Connected\");\n            }\n          };\n\n          peer.current.setRemoteDescription(\n            new RTCSessionDescription(data.value)\n          );\n\n          let sdpConstraints = {\n            offerToReceiveAudio: false,\n            offerToReceiveVideo: false,\n          };\n          peer.current.createAnswer(sdpConstraints).then((descrip) => {\n            console.log(\"Sending Answer\");\n            peer.current.setLocalDescription(descrip);\n            socket.send(\n              JSON.stringify({\n                type: \"answer\",\n                value: descrip,\n              })\n            );\n          }, null);\n\n          peer.current.ondatachannel = (event) => {\n            dataChannel.current = event.channel;\n\n            dataChannel.current.onmessage = (event) => {\n              console.log(\"Message from Agent to Client on Data Channel\");\n            };\n            dataChannel.current.onopen = () => {\n              console.log(\"Data Channel Opened on Client\");\n              peerConn.current = true;\n              dataChannel.current.send(JSON.stringify(msgs.current));\n            };\n            dataChannel.current.onclose = () => {\n              console.log(\"Data Channel Closed on Client\");\n            };\n          };\n        }\n        if (data.type === \"candidate\") {\n          console.log(\"Processing ICE\");\n          peer.current.addIceCandidate(new RTCIceCandidate(data.value));\n        }\n      };\n\n      socket.onclose = function () {\n        console.log(\"Screen Sharing Socket Close\");\n        // Maybe send a message to the other peer to close\n        // peer.current.destroy();\n        dataChannel.current.send(JSON.stringify({ clear: true }));\n        peer.current.close();\n        peer.current = null;\n        mirrorClient.disconnect();\n      };\n    }\n  }, [sharing]);\n\n  return [sharing, setSharing];\n}\n\nfunction TodoApp(props: RouteComponentProps) {\n  const [todos, setTodos] = useState<TodoItem[]>([]);\n  const [listNum, setListNum] = useState<number>(1);\n  const [totalLists, setTotalLists] = useState<number>(1);\n  const [searchQuery, setSearchQuery] = useState<string>(\"\");\n  let [filteredTodos, setFilteredTodos] = useState<TodoItem[] | null>(null);\n  const [date, setDate] = useState<string>(\n    new Date().toLocaleDateString(\"en-IN\", {\n      day: \"numeric\",\n      month: \"short\",\n      weekday: \"short\",\n    })\n  );\n  const [id_token, setID] = useState<string | null>(\n    localStorage.getItem(\"id_token\")\n  );\n  const [sharing, setSharing] = useScreenShareWithWebRTC();\n  const state: State = {\n    todos: todos,\n    listNum: listNum,\n    totalLists: totalLists,\n    searchQuery: searchQuery,\n    filteredTodos: filteredTodos,\n    date: date,\n    id_token: id_token,\n    sharing: sharing,\n  };\n\n  let updateState = (stateData: Partial<State>) => {\n    if (stateData.todos) setTodos([...stateData.todos]);\n    if (stateData.listNum) setListNum(stateData.listNum);\n    if (stateData.totalLists) setTotalLists(stateData.totalLists);\n    if (stateData.searchQuery) setSearchQuery(stateData.searchQuery);\n    if (stateData.filteredTodos !== undefined) {\n      if (stateData.filteredTodos === null) setFilteredTodos(null);\n      else setFilteredTodos([...stateData.filteredTodos]);\n    }\n    if (stateData.date) setDate(stateData.date);\n    if (stateData.id_token) setID(stateData.id_token);\n    if (stateData.sharing) setSharing(stateData.sharing);\n  };\n\n  useEffect(() => {\n    netCalls.getJSON(\n      getURL,\n      1,\n      (err: number | null, data: object) => {\n        if (err !== null) {\n          console.log(\"Empty\");\n        } else {\n          setTodos(JSON.parse(data[\"json\"]));\n          setTotalLists(Number(data[\"listNum\"]));\n        }\n      },\n      id_token\n    );\n\n    console.log(\"Reached.\");\n    gapi.load(\"auth2\", function () {\n      gapi.auth2.init();\n    });\n  }, [id_token]);\n\n  let signOutFunc = (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n    e.preventDefault();\n    console.log(\"Sign out started\");\n    var auth2 = gapi.auth2.getAuthInstance();\n    auth2.signOut().then(function () {\n      console.log(\"User signed out.\");\n      props.history.push(\"/login\");\n    });\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"header\">\n        <div className=\"date\">{date}</div>\n        <a href=\"\" id=\"signOut\" onClick={signOutFunc}>\n          Sign Out\n        </a>\n        <ListSelector\n          state={state}\n          updateState={updateState}\n          setTodos={setTodos}\n        />\n        <SearchBar\n          state={state}\n          setFilteredTodos={setFilteredTodos}\n          setSearchQuery={setSearchQuery}\n        />\n      </div>\n      <TodoList state={state} setTodos={setTodos} />\n      <InputTodo state={state} setTodos={setTodos} />\n      <ShareableLink state={state} />\n      <ScreenSharing sharing={sharing} setSharing={setSharing} />\n    </div>\n  );\n}\n\nexport default TodoApp;\n"]},"metadata":{},"sourceType":"module"}